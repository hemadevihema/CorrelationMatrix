# -*- coding: utf-8 -*-
"""CorrelationMatrix.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dBa3Z2ZxfpfMyIcY5cqyTO3pE49iyffE
"""



!pip install pandas numpy matplotlib seaborn scipy

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy import stats

# Load the dataset
url = "/content/shopping_motivations_in_china.csv"
# The dataset might not be a local file, so you can load it from a URL for Google Colab
df = pd.read_csv(url, header=None)

# Rename the columns for better understanding
df.columns = ['ID' , 'Gender' , 'Age' , 'Edu' , 'Inc' , 'Emp' ,'Monthly_Spend', 'Retail_Platform' , 'Adv' , 'Soc' , 'Grat' , 'Ide' , 'Rol' , 'Val' , 'Eff' , 'Ach' , 'MAH_1' ,'filter_$' , 'Spend' , 'Occupation' ]

# Display the first 10 rows of the data
print(df.head(10))

# Get descriptive statistics for the dataset
print(df.describe())

import pandas as pd

# Check the data types of each column to ensure all are numeric
print("Data types before conversion:")
print(df.dtypes)

# Convert all columns to numeric (if any are incorrectly typed)
df = df.apply(pd.to_numeric, errors='coerce')

# Check data types after conversion
print("\nData types after conversion:")
print(df.dtypes)

# Fill NaN values with the mean of each column
df.fillna(df.mean(), inplace=True)

# Optionally, check if there are still any missing values
print("\nMissing values after filling:")
print(df.isnull().sum())

def outliers_z_score(df):
    z_scores = np.abs(stats.zscore(df))
    outliers = (z_scores > 3).all(axis=1)  # Flag rows with outliers in any column
    return df[outliers]

# Detect outliers in the dataset
outlier_rows = outliers_z_score(df)
print("Outliers detected:\n", outlier_rows)

# Calculate the correlation matrix using Pearson method
correlation_matrix = df.corr(method='pearson')
print(correlation_matrix)

# Calculate the correlation matrix using Kendall method (alternative to Pearson)
correlation_matrix_kendall = df.corr(method='kendall')
print(correlation_matrix_kendall)

# Visualizing the correlation matrix with a heatmap
plt.figure(figsize=(10, 8))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt='.2f', linewidths=0.5)
plt.title("Correlation Matrix of Diabetes Dataset")
plt.show()

# Install required libraries (if not already installed)
!pip install pandas numpy matplotlib seaborn scipy

# Import required libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy import stats

# Load dataset from URL (Google Colab can access URLs)
url = '/content/shopping_motivations_in_china.csv'
df = pd.read_csv(url, header=None)

# Rename columns for better understanding
df.columns =  ['ID' , 'Gender' , 'Age' , 'Edu' , 'Inc' , 'Emp' ,'Monthly_Spend', 'Retail_Platform' , 'Adv' , 'Soc' , 'Grat' , 'Ide' , 'Rol' , 'Val' , 'Eff' , 'Ach' , 'MAH_1' ,'filter_$' , 'Spend' , 'Occupation' ]

# Convert all columns to numeric values (if any were misinterpreted)
df = df.apply(pd.to_numeric, errors='coerce')

# Display first 10 rows
print(df.head(10))

# Descriptive statistics of the dataset
print(df.describe())

# Check for missing values
print("Missing values before filling:")
print(df.isnull().sum())

# Fill missing data with column means (if any)
df.fillna(df.mean(), inplace=True)

# Check if missing values have been filled
print("\nMissing values after filling:")
print(df.isnull().sum())

# Function to detect outliers using Z-score (column-wise)
def outliers_z_score(df):
    z_scores = np.abs(stats.zscore(df))
    outliers = (z_scores > 3)  # Detect outliers column by column
    return df[(outliers).any(axis=1)]  # Return rows with outliers in any column

# Detect outliers
outlier_rows = outliers_z_score(df)
print("Outliers detected:\n", outlier_rows)

# Calculate the correlation matrix (Pearson method)
correlation_matrix = df.corr(method='pearson')
print("Correlation Matrix (Pearson):\n", correlation_matrix)

# Calculate the correlation matrix (Kendall method)
correlation_matrix_kendall = df.corr(method='kendall')
print("Correlation Matrix (Kendall):\n", correlation_matrix_kendall)

# Visualize the correlation matrix using a heatmap
plt.figure(figsize=(10, 8))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt='.2f', linewidths=0.5)
plt.title("Correlation Matrix of Shopping Motivations in China")
plt.show()